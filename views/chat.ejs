<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>채팅 프로그램</title>

  <!-- socket.io cdn -->
  <script src="https://cdn.socket.io/4.5.3/socket.io.min.js" integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi" crossorigin="anonymous"></script>

  <!-- axios cdn   -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <style>
    .chat-list {
      background-color: skyblue;
      width: 50%;
      height: 500px;
      padding: 10px;
      overflow-y: auto;
      word-break: break-all;
    }

    .chat-list p {
      margin-top: 5px;
      margin-bottom: 3px;
    }


    ::-webkit-scrollbar {
      display: none;
    }


    .chat-list div div div {

      padding: 6px;
      max-width: 80%;
    }

    .my-chat {
      padding-left: 30%;
      text-align: right;

    }

    .my-chat div div {
      background-color: yellow;
      display: inline-block;
      border-radius: 3px 0px 3px 3px;
      text-align: left;
      /* margin-right: 11%; */
      margin-top: 3%;
    }

    /* .my-chat .innerDiv {
      background-color: aliceblue;
    } */

    .my-chat .innerDiv span {
      display: inline;
      margin-right: 13px;
      padding-top: 40px;
      font-size: 14px;
    }

    .other-chat .innerDiv span {
      display: inline;
      margin-left: 13px;
      padding-top: 40px;
      font-size: 14px;
    }



    .other-chat {
      margin-top: 10px;
    }

    .other-chat div div {
      background-color: white;
      display: inline-block;
      border-radius: 0px 3px 3px 3px;
      margin-top: 3px;
    }

    .notice {
      text-align: center;
      color: navy;
      font-size: 12px;
      margin-top: 5px;
    }

    .d-none {
      display: none;
    }

    img {
      height: 60px;
      width: 60px;
      border-radius: 50% 50%;
    }

    #message {
      /* margin-right: 3%; */
      /* margin-left: 3%; */
      width: 50.7%;
      height: 10vh;
      display: block;
    }

    .msgForm button {
      width: 10%;
    }

    /* .chat-list p img{
     position: relative;
     top: 5vh;
     margin-left: 1vw;
    } */

    .entire {
      font-size: 15px;
      margin-top: 20px;
      margin-bottom: 20px;
    }

    @media (max-width: 600px) {
      .chat-list {
        width: 90%;
        margin-right: 6%;
        margin-left: 3%;
      }

      #message {
        /* margin-right: 3%; */
        margin-left: 3%;
        width: 92%;
        height: 20vh;
      }
    }
  </style>
</head>

<body>
  <% if (isLogin) { %>
  <h1 class='hi' id=<%= userInfo.nickname %>>
    <%= userInfo.nickname %>
  </h1>

  <div class="entire" id=<%= groupId %>></div>
  <% } %>
  <!-- [실습44-2] 채팅창 입장 문구 안내 socket.it -> nickname -->




  <!-- [실습43] 채팅창 UI 만들기 -->
  <div class="chat-box">
    <div id="chat-list" class="chat-list">
      <!-- [실습43] 임시 데이터 -->
      <% if(chatContent !== null){ %>
      <% for (i = 0; i < Object.keys(chatContent).length; i++){ %>
      <% if(userInfo.userid == chatContent[i].user_id){ %>
      <div class="my-chat">
        <div class="innerDiv">
          <span class="timeDiv"><%= chatContent[i].time %></span>
          <div class="divChat"><%= chatContent[i].content %></div>
          <% }else { %>
          <div class="other-chat">
            <div class="nickDiv"><%= chatContent[i].user_id %></div>
            <div class="innerDiv">
              <div class="divChat"><%= chatContent[i].content %></div>
              <span class="timeDiv"><%= chatContent[i].time %></span>
              <% } %>
            </div>
          </div>

          <% }} %>
          <!-- 
        <div class="notice">xx가 입장했습니다.</div>
        <div class="my-chat">
          <div class="innerDiv">
            <div class="divChat">바보</div>
            <div class="timeDiv">18:30</div>
          </div>
        </div>
        <div class="other-chat">
          <div class="nickDiv">user2</div>
          <div class="innerDiv">
            <div class="timeDiv">18:32</div> 
            <div class="divChat">인정</div>
          </div>
        </div>
        <div class="notice">xx가 입장했습니다.</div> -->
        </div>
        <form class="msgForm">
          <input type="text" id="message" autofocus />
          <button type="submit" onclick="chatDb()">전송</button>
        </form>
      </div>

      <script>
        let myNick = document.querySelector(".hi").id;
        let socket = io.connect(); // socket 사용을 위한 객체 생성

        let dateinit;

        window.history.forward();

        function noBack() {
          window.history.forward();
        }
        socket.on('connect', () => {
          console.log('**** ⭕ Client Socket Connected >>', socket.id);
          socket.emit("id", {
            nick: myNick
          });
        });



        // [실습44] 채팅창 입장 안내 문구
        // notice 이벤트를 받아서 공지 문구를 출력
        socket.on('notice', (msg) => {

          console.log('socket on notice >> ', msg);

          document
            .querySelector('#chat-list')
            .insertAdjacentHTML('beforeend', `<div class="notice">${msg}</div>`);


        });

        socket.on('error', (msg) => {
          alert(msg);
        });
        chatDb = () => {
          let msg = document.querySelector('#message').value
          let entire = document.querySelector('.entire')
          let today = new Date();
          let hours = today.getHours(); // 시
          let minutes = today.getMinutes();
          if (hours < 10) {
            hours = `0${hours}`
          }
          if (minutes < 10) {
            minutes = `0${minutes}`
          }
          let timeSet = `${hours}:${minutes}`
          // console.log('content', data.msg);
          console.log('list_id!!!', entire.id);
          // console.log('time', timeSet);
          axios({
            method: "POST",
            url: "/chatSave",
            data: {
              content: msg,
              list_id: entire.id,
              time: timeSet
            },

          })
        }

        // [실습45] 채팅창 메세지 전송 step1
        // "send" 이벤트 전송하기
        document.querySelector('.msgForm').addEventListener('submit',
          function send(e) {

            e.preventDefault();
            console.log(document.querySelector('#message').value);
            if (document.querySelector('#message').value == '') {
              return
            }
            const data = {
              msg: document.querySelector('#message').value,

            }
            // document.createElement()
            socket.emit('send', data)
            document.querySelector('#message').value = ''
            let chatList = document.querySelector('#chat-list')

          })

        socket.on('entire', (data) => {
          let parentH = document.querySelector('h1')
          console.log(data);
          console.log(Object.keys(data).length)
          entire = document.querySelector('.entire')
          entire.textContent = `접속자 : ${Object.keys(data).length}명`

        })

        socket.on('newMessage', (data) => {
          console.log(data.nick);
          console.log('data.nick', data.nick);
          console.log('data.msg', data.msg);
          let chatList = document.querySelector('#chat-list')
          // 상대방 or 나 일때 구분하는 div
          let div = document.createElement('div')
          // 상대방 닉네임
          let nickDiv = document.createElement('p')
          nickDiv.classList.add('nickDiv')
          // 메세지 채팅 내용
          let divChat = document.createElement('div')
          // div class="chathere"
          divChat.classList.add('chathere')
          // innerDiv
          let innerDiv = document.createElement('div')
          innerDiv.classList.add('innerDiv')
          // 프사
          let kakaoImg = document.createElement('img')
          kakaoImg.src = "/static/img/kakao.jpg"

          let today = new Date();
          let hours = today.getHours(); // 시
          let minutes = today.getMinutes();

          console.log(`0${hours}`);

          if (hours < 10) {
            hours = `0${hours}`
          }
          if (minutes < 10) {
            minutes = `0${minutes}`
          }
          console.log(chatList.lastChild);
          let timeDiv = document.createElement('span')
          timeDiv.classList.add('timeDiv')
          // span 작성 시간
          timeDiv.innerHTML = `${hours}:${minutes}`
          divChat.textContent = data.msg
          nickDiv.textContent = data.nick


          if (chatList.lastChild.className == 'my-chat') {

            let daterinit = `${hours}:${minutes}`

            console.log(dateinit == daterinit);

            if (dateinit == daterinit) {


              if (myNick == data.nick) {
                // my-chat 내 채팅일때 클래스 네임
                div.classList.add('my-chat')

                console.log('요소선택', chatList.lastChild.querySelector('span'))
                if (chatList.lastChild.querySelector('span')) {
                  chatList.lastChild.querySelector('span').remove()
                }
                innerDiv.appendChild(timeDiv);
                innerDiv.appendChild(divChat)
              } else {
                // other-chat 상대방 채팅일때 클래스 네임
                div.classList.add('other-chat')
                // 채팅구분하는 div 안에 nickDiv (p) 있음
                div.appendChild(nickDiv)
                // nickDiv.appendChild(kakaoImg)
                // innerDiv <= timeDiv(시간이 들어간 div), divChat(채팅내용 )
                innerDiv.appendChild(divChat)
                innerDiv.appendChild(timeDiv);
              }




            } else {


              if (myNick == data.nick) {
                div.classList.add('my-chat')
                innerDiv.appendChild(timeDiv);
                innerDiv.appendChild(divChat)
              } else {
                div.classList.add('other-chat')

                div.appendChild(nickDiv)
                // nickDiv.appendChild(kakaoImg)

                innerDiv.appendChild(divChat)
                innerDiv.appendChild(timeDiv);

              }
              dateinit = `${hours}:${minutes}`

            }

          } else {



            let daterinit = `${hours}:${minutes}`

            console.log(dateinit == daterinit);

            if (dateinit == daterinit) {


              if (myNick == data.nick) {
                div.classList.add('my-chat')
                innerDiv.appendChild(timeDiv);
                innerDiv.appendChild(divChat)
              } else {
                div.classList.add('other-chat')

                div.appendChild(nickDiv)
                // nickDiv.appendChild(kakaoImg)

                innerDiv.appendChild(divChat)
                innerDiv.appendChild(timeDiv);

              }



            } else {


              if (myNick == data.nick) {
                div.classList.add('my-chat')
                innerDiv.appendChild(timeDiv);
                innerDiv.appendChild(divChat)
              } else {
                div.classList.add('other-chat')

                div.appendChild(nickDiv)
                // nickDiv.appendChild(kakaoImg)

                innerDiv.appendChild(divChat)
                innerDiv.appendChild(timeDiv);
              }
              dateinit = `${hours}:${minutes}`
            }
          }
          div.appendChild(innerDiv)
          chatList.appendChild(div)

          chatList.scrollTop = chatList.scrollHeight;
        })
      </script>
</body>

</html>